// Zumo32U4
#include <Wire.h>
#include <Zumo32U4.h>

Zumo32U4Motors motors;
Zumo32U4ButtonA buttonA;
Zumo32U4Encoders encoders;
Zumo32U4OLED display; 



//Setter switch case til modus tre som default
int modus= 3;

//millis funksjoner forå få kode uten delay
unsigned long previousMillis = 0; 

//Tall for beregning av lengde
const float Diameter = 3.5; 
const int   antall_rotasjon = 910;  // Tall  
const float Pi = 3.14159; 
int lengde_kjort_siden_ladning = 0; 
unsigned long tid_kjort = 0; //Tidsfunksjon for å beregne gjennomsnittshastighet.

//Tall for beregning av batterietet 
float batteriet = 100;
float lengde_kjort = 0;
const long interval = 2000;

//Startverdi for motoren
long motor_h = 0;
long motor_v = 0;
long forrige_motor_h = 0;
long forrige_motor_v = 0;

// Funksjoner for å kunne behandle negative Encoder verdier. 
float CountsDiffV = 0;
float CountsDiffH = 0;
float snitt_hastighet = 0;
float charging_constant = 0;

//Tar for seg registrering av knappen. 
int knappe_teller = 0; 

void setup()
{  
}

//
// denne blokken her tar for seg Encoderen. Siden det kan oppstå problemer når encoder når max verdi og går i modus
//er denne funksjonstubben er dedikert til å løse dette problemet.

void encoder() { 
  motor_v = encoders.getCountsLeft(); //Henter encoder data
  motor_h = encoders.getCountsRight(); //henter encoder data
  // Beregn Counts og Distanse basert på forskjellen mellom nåværende og forrige verdi
  CountsDiffV = motor_v - forrige_motor_v;
  CountsDiffH = motor_h - forrige_motor_h;
  //if blokkene under tar for seg verdiene til encoderen avhengig om den er negativ eller ikke. 
  if (CountsDiffV > 30000) {
    CountsDiffV -= 65536;  // Håndter overgangen til negativ verdi
  } else if (CountsDiffV < -30000) {
    CountsDiffV += 65536;  // Håndter overgangen til positiv verdi
  }
  if (CountsDiffH > 30000) {
    CountsDiffH -= 65536;  // Håndter overgangen til negativ verdi
  } else if (CountsDiffH < -30000) {
    CountsDiffH += 65536;  // Håndter overgangen til positiv verdi
  }
}

//Funksjon for å få en verdi på knappetrykket A
void knappe_teller_funk(){
 if (buttonA.getSingleDebouncedPress()) {
    knappe_teller += 1;  
  }
}

//Denne funksjonstubben handler om å få beregnet  avstand bilen har 
void distanse(){ 
  encoder();
  float Counts = (CountsDiffV + CountsDiffH) / 2;
  float Distanse = Diameter * Pi * Counts / antall_rotasjon; //bergegner lengdekjørt
  charging_constant = Distanse / 0.2; //Hvor fort bilen skal lade
  float lengde_kjort_siden_ladning = Diameter * Pi * Counts / antall_rotasjon; //Beregner lengden kjørt utifra encoderen sine verdier og diameter på beltet

  if (Counts < 0 && batteriet < 100) { //behandler de negative verdiene slik at batteriet ikke går i negative verdi ved negativ counts. 
    batteriet = batteriet - charging_constant / 2;  //Batteriet går nedover 
  } else {
    batteriet = batteriet + charging_constant / 2; //Batteriet går nedover
  }

  if (Counts > 0) { //Behandler porsitive verdier av Counts
    lengde_kjort = lengde_kjort + Distanse; //Sørger for at distansen 
  } else {
    lengde_kjort = lengde_kjort - Distanse; //Sørger for at distansen ikke blir negativ ved negative counts verdier. 
  }
  forrige_motor_h = motor_h;
  forrige_motor_v = motor_v;
}


//Beregner gjennomsnitthastigheten til bilen
void gjennomsnitt_hastighet(){
encoder();
distanse();
tid_kjort = millis()/1000;
snitt_hastighet = (lengde_kjort) / (tid_kjort);
}


//Enkel skjerm funksjon
void skjerm(){
        display.gotoXY(3,0);
  display.println(batteriet);
  display.gotoXY(5,1);  
  display.println(lengde_kjort);
  display.gotoXY(0,1);
  display.println(knappe_teller);
 
}


//Tar for seg hva som skjer med batteriet når det går tomt
void batteri_er_tomt(){ 
    if (batteriet  <=3) { //Hvis batteriet går under 3 prosent så går bilen i lader modus
      previousMillis = millis();
      modus = 2;
    }
}

void bil_stopper(){  //Sender bil til ladning avhengig 
  motors.setSpeeds(0, 0); //Setter speeden til 0 slik at den stopper
//Sjekker om batteriet er under 50. DEtte gjør den slik at den skjønner at den skal lades opp, å ikke gå i kjøre modus.
//DEn sjekker også om hurtigladning modus er valgt eller ikke. 
  if (millis() - previousMillis >= interval && batteriet <= 50 && knappe_teller % 2 == 1 ) { 
        previousMillis = millis(); //Reseter millis
        modus = 4;  //Hvis knapp A er trykket blir bilen sendt til hurtigladning
      }

else if (millis() - previousMillis >= interval && batteriet <= 50) 
//Hvis knapp ikke er trykket og batteriet er under 50 går den til modus 1 som er lading
{
  previousMillis = millis();
  modus = 1; //Hvis knapp A ikke er trykket blir bilen sendt til vanelig ladning
}
else if (millis() - previousMillis >= interval && batteriet  >= 90) //Hvis batteriet er over 90 skal den gå til kjøring. For nå vet vi at batteriet har blitt ladet opp
{
  previousMillis = millis();
  modus=3; //Sender bil tilbake til kjøring
}
}

//Blokken under tar for seg hvordan bilen skal lade ved hurtigladning. 

void bil_hurtig_lader(){ 
if (batteriet <= 100 ) //Batteriet er under 100, da skal bilen lade
{ 
  motors.setSpeeds(-50, -50); //Setter en ladningshastighet 
  knappe_teller = 0;  //Reseter knappeteller
  batteriet = batteriet +charging_constant * (-50);  //Funksjon for hastigheten til oppladning
}

else if (batteriet >= 100 ) //når bilen er ladet til 100 prosent skal bilen sendes til modus 2, som gjør den klar for å kjøre igjen
{ 
  previousMillis = millis(); //Reseter previousMillis
  modus=2; //Sender til stoppefunksjon 
}
}

//Denne funksjonen tar for seg lading av bil i vanlig modus. 
void bil_lader(){ 
if (batteriet <= 100 ) //Hvis batteriet er under 100 prosent lades det
{
  motors.setSpeeds(-50, -50);  //Setter en ladehastighet
  batteriet = batteriet +charging_constant * (-0.2); //Funksjon for hastigheten til oppladning
}

else if (batteriet >= 100 ) //når batteriet er 100 prosent sendes det til modus 2, som stopper bilen. 
{ 
  previousMillis = millis(); //Reseter previousMillis
  modus=2; //Sender bilen til modus 2 som er stans. 
}
}


void modus_switch(){
  gjennomsnitt_hastighet(); //Funksjon for gjennomsnittshastighet
  encoder(); //Funksjonen til encoder
  distanse();//Funksjonen til distanse måling
  knappe_teller_funk(); //Funksjonen til knappen

  switch (modus) 
  {
  case 1: //Dette er modusen som tar for seg oppladning av bil. Oppladningshastigheten er normal. 
  bil_lader();
  break;
   
  case 2:   //Modusen som får bilen til å stoppe opp mellom switching av kjøring frem og tilbake, og visa verca.  
  bil_stopper();
  break;
  
  case 3: //Modusen som sørger for at bilen kjører fremover 
   motors.setSpeeds(50, 50);
   batteri_er_tomt();
  break;

  case 4:
  bil_hurtig_lader(); //Dette er modusen som tar for seg hurtigoppladning av bilen. Oppladningshastigheten er høy. 
  break;
  default:
   break;
}
}

void loop(){
skjerm(); //Skjermfunksjoner 
modus_switch(); //Switchen. 
}

